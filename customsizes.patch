diff --git docs/conf.py docs/conf.py
index 0ab50fc..5666342 100644
--- docs/conf.py
+++ docs/conf.py
@@ -50,7 +50,7 @@ copyright = u'2013, Daniel Rus Morales'
 # The short X.Y version.
 version = '1.1'
 # The full version, including alpha/beta/rc tags.
-release = '1.1a6'
+release = '1.1b1'
 
 # The language for content autogenerated by Sphinx. Refer to documentation
 # for a list of supported languages.
diff --git docs/example.rst docs/example.rst
index 87c06e3..d8e8e54 100644
--- docs/example.rst
+++ docs/example.rst
@@ -4,13 +4,13 @@
 Demo projects
 =============
 
-Django-inlines-media comes with two demo projects:
+There are two demo projects:
 
 1. **demo**: An article model with a TextFieldWithInlines
-2. **demo_wysihtml5**: The same article model with a Wysihtml5TextField
+2. **demo_wysihtml5**: The same article model with a Wysihtml5TextField (beta)
 
 
-The example sites in the repository live `here <http://github.com/danirus/django-inline-media/tree/master/example>`.
+Find the code of the example sites `here <http://github.com/danirus/django-inline-media/tree/master/example>`_.
 
 .. index::
    pair: Demo; Setup
@@ -18,23 +18,23 @@ The example sites in the repository live `here <http://github.com/danirus/django
 Demo sites setup
 ================
 
-I recommended you to run the demo sites in a `virtualenv <http://www.virtualenv.org/en/latest/>`_ for this application. Create a virtualenv, clone the code and cd into any of the demo sites.
+Run the demo sites in a `virtualenv <http://www.virtualenv.org/en/latest/>`_ for this app. Create the virtualenv, clone the code and cd into any of the demo sites. Then do as follow.
 
-Example site **demo**::
+For the **demo** project::
 
     $ cd django-inline-media/example/demo
     $ python manage.py syncdb --noinput
     $ python manage.py collectstatic
     $ python manage.py runserver
 
-Example site **demo_wysihtml5**::
+For the **demo_wysihtml5** project::
 
     $ cd django-inline-media/example/demo_wysihtml5
     $ sh install.sh
     $ python manage.py collectstatic
     $ python manage.py runserver
 
-Both example sites have the same admin user available: ``user: admin``, ``pwd: admin``.
+Both sites have the same admin user/pwd: ``admin/admin``.
 
 
 .. index::
@@ -54,7 +54,7 @@ The demo site uses **django-inline-media** with a custom **articles** app. The *
 
 The **Article** model has a **body** field of type **TextFieldWithInlines**. The field uses its own widget **TextareaWithInlines** that renders an extra control to insert inline media in the textarea. The inline media content can be placed at different positions and with different size.
 
-Position can either be **left**, **right**, or **centered**. The size can be **small** (150px width), **medium** (200px width) or **large** (250px width). Pictures positioned centred are shown at **full size**, and centred picture sets use a frame of 380x280 pixels.
+Positions can be **left**, **right**, or **center**. The size can be **mini** (80px width), **small** (150px width), **medium** (200px width), **large** (250px width) and **full**. Pictures at the center are in **full size**, and picturesets in the center render at a default size of 380x280 pixels. All sizes are customizables using the setting ``INLINE_MEDIA_CUSTOM_SIZES``.
 
 
 Example articles
diff --git docs/images/demo_admin.png docs/images/demo_admin.png
index d73eac4..f718f65 100644
Binary files docs/images/demo_admin.png and docs/images/demo_admin.png differ
diff --git docs/index.rst docs/index.rst
index e0778df..2b9cb1b 100644
--- docs/index.rst
+++ docs/index.rst
@@ -1,4 +1,4 @@
-.. django-inlines-media documentation master file, created by
+.. django-inline-media documentation master file, created by
    sphinx-quickstart on Mon Dec 19 19:20:12 2011.
    You can adapt this file completely to your liking, but it should at least
    contain the root `toctree` directive.
@@ -12,7 +12,7 @@ Introduction
    single: Features
 
 1. Inserts pictures and collection of pictures into your texts using the ``TextAreaWithInlines`` widget.
-2. Positions media content at different places and sizes (small/medium/large at left/right or full at the center).
+2. Positions media content at different places and sizes (mini/small/medium/large at left/right or full at the left/center/right).
 3. Facilitates administration with thumbnails and search by tags, author and license.
 4. Shows a customised control to insert media content in text fields.
 5. Uses jquery `prettyPhoto <http://www.no-margin-for-errors.com/projects/prettyphoto-jquery-lightbox-clone/>`_ to show pictures and galleries when clicking on them.
@@ -73,7 +73,7 @@ Quick start
 Run the **demo** in ``django-inline-media/examples/demo`` to see an example.
 
 
-If you rather prefer to use the Wysihtml5 widget for your textareas:
+If you prefer to use Wysihtml5 for your textareas (beta):
 
 1. Get the widget from `Django Wysihtml5 <http://github.com/danirus/django-wysihtml5>`_.
 
diff --git docs/settings.rst docs/settings.rst
index f90ab93..f65e7b7 100644
--- docs/settings.rst
+++ docs/settings.rst
@@ -12,61 +12,68 @@ Django-inline-media recognizes four setting:
 
 
 .. index::
-   single: INLINE_MEDIA_CUSTOM_SIZES
-   pair: Setting; INLINE_MEDIA_CUSTOM_SIZES
+   single: INLINE_MEDIA_TYPES
+   pair: Setting; INLINE_MEDIA_TYPES
 
-``INLINE_MEDIA_CUSTOM_SIZES``
-=============================
+``INLINE_MEDIA_TYPES``
+======================
 
 **Optional**
 
-This setting defines custom sizes used in inline_media templates. Each ``<inline>`` element has an ``inline_type`` attribute that refers to an **app_label.model**, and a ``class`` attribute that defines the **size and alignment** of the inline element. 
-
-``INLINE_MEDIA_CUSTOM_SIZES`` is a 2-level depth dictionary. The first level contains ``inline_types`` with **app_label.model** pairs as keys.  The second level contains ``class`` values as keys and values as geometries. 
-
-When the value is just an **int**, it represents the **width** of the thumbnail. When the value is a **tuple** it represents the **(width, height)** of the thumbnail. If the value is something else the size is not being used in the corresponding template. It is the case of the template 'inline_media/inline_media.picture.full.html', distributed with this app.
+Defines the inline media types available project wide. 
 
 It defaults to::
 
-    INLINE_MEDIA_CUSTOM_SIZES = { 
-                                  'inline_media.picture':
-                                      { 
-                                        'mini': 80,
-                                        'small': 150,
-                                        'medium': 200,
-                                        'large': 250,
-                                        'full': 'full' 
-                                      },
-                                  'inline_media.pictureset':
-                                      { 
-                                        'mini': (80, 80),
-                                        'small': (150, 150),
-                                        'medium': (200, 200),
-                                        'large': (250, 250),
-                                        'full': (380, 280) 
-                                      } 
-                                }
+    INLINE_MEDIA_TYPES = ['inline_media.picture',
+                          'inline_media.pictureset']
 
 
 .. index::
-   single: INLINE_MEDIA_DEFAULT_SIZE
-   pair: Setting; INLINE_MEDIA_DEFAULT_SIZE
+   single: INLINE_MEDIA_CUSTOM_SIZES
+   pair: Setting; INLINE_MEDIA_CUSTOM_SIZES
 
-``INLINE_MEDIA_DEFAULT_SIZE``
+``INLINE_MEDIA_CUSTOM_SIZES``
 =============================
 
 **Optional**
 
-This setting establishes the default size in case an entry corresponding to an ``app_label.model`` and ``class`` doesn't exist in ``INLINE_MEDIA_CUSTOM_SIZES``.
+This setting defines custom size values for the available ``INLINE_MEDIA_TYPES``. By default every inline type declared in ``INLINE_MEDIA_TYPES`` can be rendered in **mini**, **small**, **medium**, **large** and **full** size.
 
-It defaults to::
+``INLINE_MEDIA_CUSTOM_SIZES`` is a 2-level depth dictionary to define custom size values for each of the 5 size classes. Size classes can also be disabled. 
 
-    INLINE_MEDIA_DEFAULT_SIZE = 200
+The first level contains inline types with **app_label.model** pairs as keys.  The second level contains class sizes as keys and values as geometries. When the value is just an **int**, it represents the **width** of the thumbnail. When the value is a **tuple** it represents the **(width, height)** of the thumbnail. The value can be ``None``, what means the size won't be available for that inline type.
 
+It defaults to::
+
+    INLINE_MEDIA_CUSTOM_SIZES = { 
+        'inline_media.picture': { 
+            'mini': 80,
+            'small': 150,
+            'medium': 200,
+            'large': 250,
+        },
+        'inline_media.pictureset': { 
+            'mini': None,
+            'small': (150, 150),
+            'medium': (200, 200),
+            'large': (250, 250),
+            'full': (380, 280) 
+        } 
+    }
+
+See that the 'full' class size is not defined for the type ``inline_media.picture``. That doesn't disable it. By default the 5 class sizes are active for every inline type defined in ``INLINE_MEDIA_TYPES``. The purpose of this setting is either to pass a custom size in the context to the template, or to disable a class size. 
+
+To disable the 'small' size for type ``inline_media.pictureset`` just set it to ``None`` in your settings module::
+
+    INLINE_MEDIA_CUSTOM_SIZES = {
+        'inline_media.pictureset': {
+            'small': None,
+        }
+    }
 
 .. index::
-   single: INLINE_MEDIA_DEFAULT_SIZE
-   pair: Setting; INLINE_MEDIA_DEFAULT_SIZE
+   single: INLINE_MEDIA_TEXTAREA_ATTRS
+   pair: Setting; INLINE_MEDIA_TEXTAREA_ATTRS
 
 ``INLINE_MEDIA_TEXTAREA_ATTRS``
 ===============================
@@ -79,17 +86,21 @@ To apply common attributes to all ``TextareaWithInline`` widgets use the **defau
 
 You can also apply rendering attributes on a per ``app_label.model`` and ``field`` basis. 
 
-In the following example, fields of type ``TextFieldWithInlines`` get the ``style`` attribute applied by default. Then the ``abstract`` and ``body`` fields of the ``articles.article`` model get the attribute ``rows`` applied too. The ``style`` attribute defined in the **default** key can be overriden by simply defining it again for an ``app_label.model/field`` combination::
+In this example, every ``TextFieldWithInlines`` field will get the ``style`` attribute applied by default. Then, ``abstract`` and ``body`` fields of the ``articles.article`` model will get the attribute ``rows`` applied too. The ``style`` attribute defined in the **default** key can be overriden by simply defining it again for an ``app_label.model/field`` combination::
 
     INLINE_MEDIA_TEXTAREA_ATTRS = {
-                                      'default': {
-                                          'style': 'font: 13px monospace',
-                                      },    
-                                      'articles.article': {
-                                          'abstract': { 'rows':  5 },
-                                          'body':     { 'rows': 20 }
-                                      }    
-                                  }
+        'default': {
+            'style': 'font: 13px monospace',
+        },    
+        'articles.article': {
+            'abstract': { 
+                'rows':  5 
+            },
+            'body': { 
+                'rows': 20 
+            }
+        }    
+    }
 
 Defaults to ``{}`` so that no extra attributes are applied.
 
diff --git docs/templates.rst docs/templates.rst
index c62214b..8e8dc8f 100644
--- docs/templates.rst
+++ docs/templates.rst
@@ -74,9 +74,9 @@ Your own InlineTypes
 
 If the django-inline-media models, Picture and PictureSet, are not suitable for your project or need another ones, just create your own and bind them to the app. 
 
-Once you have your model (say ``MyPicture``), go to the admin site and add an ``InlineType`` object associated with it. Your model will show up in the dropdown list of types for inlines that you can see at the bottom of ``TextFieldWithInlines`` fields (like the ``body`` field in the Article model of the demo).
+Once you have your model (say ``MyPicture``), declare it the setting ``INLINE_MEDIA_TYPES``. Your model will then show up in the dropdown list of inline types at the bottom of your ``TextFieldWithInlines`` fields (like the ``body`` field in the Article model of the demo).
 
-Finally create templates to render your own media content. Name your templates after the correspoding ``app_label`` for your model:
+Then create templates to render your own media content. Name your templates after the correspoding ``app_label`` for your model:
 
   * ``inline_media/<my_app_label>.mypicture.<size>.html``
   * ``inline_media/<my_app_label>.mypicture.default.html``
diff --git docs/templatetags.rst docs/templatetags.rst
index d7a09ac..a142d6e 100644
--- docs/templatetags.rst
+++ docs/templatetags.rst
@@ -1,19 +1,18 @@
 .. _ref-templatetags:
 
 .. index::
-   pair: Filters; Templatetags
+   single: Filters
 
-=========================
-Filters and Template Tags
-=========================
+=======
+Filters
+=======
 
 Django-inline-media comes with two filters and one tag:
 
  * filter ``render_inlines``
  * filter ``extract_inlines``
- * tag ``get_inline_types``
 
-To use any of them in your templates you first need to load them::
+Load the templatetag module to use them in your templates::
 
     {% load inlines %}
 
@@ -73,22 +72,3 @@ Example usage::
         {% include "inline_media/inline_media_picture.html" with object=inline.object class=inline.class %}
       {% endifequal %}
     {% endfor %}
-
-
-.. index::
-   single: get_inline_types
-   pair: Tag; get_inline_types
-
-Tag: get_inline_types
-=====================
-
-Gets all inline types.
-
-Syntax::
-
-        {% get_inline_types as [var_name] %}
-
-Example usage::
-
-        {% get_inline_types as inline_list %}
-
diff --git docs/tutorial.rst docs/tutorial.rst
index 2b339aa..443e8e9 100644
--- docs/tutorial.rst
+++ docs/tutorial.rst
@@ -4,7 +4,7 @@
 Tutorial
 ========
 
-Django-inline-media is a simple reusable app that allows insertion of inline media content into TextFields. 
+Django-inline-media is a simple reusable app that allows insertion of inline media content, so far pictures and picture sets, into texts.
 
 
 .. index::
@@ -13,13 +13,13 @@ Django-inline-media is a simple reusable app that allows insertion of inline med
 Motivation
 ==========
 
-You might find this application useful if you need to add inline content to a TextField. A blogging app is a good candidate. In general, any custom model in your project aimed to show text combined with inline media may benefit from it. 
+Django-inline-media help your users place images or collections of images as inlines in texts.
 
-Django-inline-media comes with two media models: Picture and PictureSet, but you can create yours to support other media formats or providers.
+Any application used to write text that needs to insert inline pictures is a good candidate to adopt Django-inline-media. The app will render the text with inline pictures or picture sets, and when defined as clickable pictures will be overlayed in a bigger size on top of the page. 
 
-This tutorial explains how to install and configure django-inline-media, how to integrate it in your web project and how to use the new widget.
+Django-inline-media comes with two media models: Picture and PictureSet, but you can create your own inline types to support other media formats or providers (`oembed <http://oembed.com>`_ based content coming soon).
 
-It additionally supports the Wysihtml5 rich text editor by providing a replacement for the Wysihtml5's ``insertImage`` command. See the **demo_wysihtml5** for details on this feature.
+This tutorial explains how to install and configure django-inline-media, how to integrate it in your web project and how to use the widget. It additionally supports the `Wysihtml5 <http://xing.github.com/wysihtml5/>`_ rich text editor by providing a replacement for the Wysihtml5's ``insertImage`` command. See the **demo_wysihtml5** for details on this feature.
 
 
 .. index::
@@ -28,9 +28,9 @@ It additionally supports the Wysihtml5 rich text editor by providing a replaceme
 Installation
 ============
 
-Installing Django-inline-media is as simple as checking out the source and adding it to your project or ``PYTHONPATH``.
+Check out the sources and add the app to your project or ``PYTHONPATH``.
 
-Use git, pip or easy_install to check out Django-inline-media from Github_ or get a release from PyPI_:
+Use git, pip or easy_install to check out django-inline-media from Github_ or get a release from PyPI_:
 
   1. Use **git** to clone the repository, and then install the package (read more about git_):
 
@@ -62,27 +62,27 @@ Use git, pip or easy_install to check out Django-inline-media from Github_ or ge
 Configuration
 =============
 
-Configuration comprehends the following steps:
+Follow the steps:
 
 1. Install required apps:
 
   * ``sorl.thumbnail``: http://pypi.python.org/pypi/sorl-thumbnail/
   * ``tagging``: http://pypi.python.org/pypi/tagging/
 
-2. Add the following entries in your ``settings.py``:
+2. Add the following entries to your ``settings.py``:
 
  * Add ``inline_media``, ``sorl.thumbnail`` and ``tagging`` to ``INSTALLED_APPS``.
  * Add ``THUMBNAIL_BACKEND = "inline_media.sorl_backends.AutoFormatBackend"``
  * Add ``THUMBNAIL_FORMAT = "JPEG"``
- * Optionally you can add an extra setting to control where django-inline-media stores images (see :doc:`settings`), but it has a sane default.
+ * Optionally add an extra setting to control where django-inline-media stores images (see :doc:`settings`). It has a sane default, so don't bother to much.
 
-3. Run the following django manage commands:
+3. Run management commands:
 
-   * ``python manage.py syncdb`` to create the inline_media DB entities (InlineType, License, Picture, PictureSet)
-   * ``python manage.py collectstatic`` to copy CSS and Javascript content from inline_media into your project's static directory
+   * ``python manage.py syncdb`` to create inline_media DB entities (License, Picture, PictureSet)
+   * ``python manage.py collectstatic`` to copy CSS and JavaScript content from inline_media to your project's static directory
 
 
-There are a few extra details to consider when planning to use the Wysihtml5 editor. Read on the specific :ref:`ref-wysihtml5-demo`.
+There are extra steps when planning to use the Wysihtml5 editor. Read on the specific :ref:`ref-wysihtml5-demo`.
 
 
 .. index::
@@ -93,13 +93,13 @@ There are a few extra details to consider when planning to use the Wysihtml5 edi
 Using inline-media
 ==================
 
-Using inline-media is pretty straightforward:
+Using inline-media is pretty easy:
 
 1. Decide which fields of your models will hold inline media content (the typical candidate: a ``body`` field of a blog ``Post`` model)
 
-2. Change their type from **TextField** to **TextFieldWithInlines**. This change does not affect your models' table definition, it does affect the way the field is rendered
+2. Change their type from **TextField** to **TextFieldWithInlines**. This change does not affect your models' table definition, but just the way fields are rendered.
  
-3. Change the admin class of those models and make them inherit from **AdminTextFieldWithInlinesMixin**. This change make fields of type **TextfieldWithInlines** be rendered as **TextareWithInlines**
+3. Change the admin class of those models and make them inherit from **AdminTextFieldWithInlinesMixin**. Fields of type **TextfieldWithInlines** will be rendered as **TextareWithInlines**
 
 Let's see it with an example: the Article model.
 
@@ -111,7 +111,7 @@ Let's see it with an example: the Article model.
 Example code
 ------------
 
-The Article model, in the demo project, has a couple of fields of type TextField, ``abstract`` and ``body``. Only the field ``body`` may have inline media content. Django-inline-media comes with a new field **TextFieldWithInlines** that extends Django's **TextField** to support inline media content insertion. The new Article's definition will use the new type for the ``body`` field::
+The Article model, in the demo project, has a couple of fields of type TextField, ``abstract`` and ``body``. Only the field ``body`` will hold inline media content. Article definition will look as follow::
 
     from inline_media.fields import TextFieldWithInlines
 
@@ -123,7 +123,7 @@ The Article model, in the demo project, has a couple of fields of type TextField
 	publish = models.DateTimeField(default=datetime.now)
 
 
-And the ArticleAdmin class will inherit from both, **AdminTextFieldWithInlinesMixin** and Django's **ModelAdmin**::
+The ArticleAdmin class will inherit from both, **AdminTextFieldWithInlinesMixin** and Django's **ModelAdmin**::
 
     from django.contrib import admin
     from inline_media.admin import AdminTextFieldWithInlinesMixin
@@ -142,30 +142,16 @@ And the ArticleAdmin class will inherit from both, **AdminTextFieldWithInlinesMi
 
 
 .. index::
-   single: InlineType
+   single: Types
 
-InlineType instances
-====================
+In action
+=========
 
-Four models are available when installing inline_media:
-
-1. **InlineType**: Media models are registered as InlineType instances
-2. **License**: Licenses under which media content is publicly available or distributed
-3. **Picture**: Pictures with title, description, tags, author, license...
-4. **PictureSet**: Collections of pictures
-
-In order to insert inline content in your text fields you have to:
-
-1. Create a new media model (Picture, PictureSet, Video, VideoSet...).
-2. Create a new InlineType instance and use the model of the previous point as the content type for the instance.
-3. Optionally create a new template to render the media content provided by the model.
-4. Go to your Admin site, write your text fields and insert new media content using the new InlineType.
-
-Look at the demo project admin site. See that **Picture** and **PictureSet** are already instances of **InlineType**. Then click on any of the articles admin change view and see that the **inlines** field below the **body** allows you to choose between inline types Picture and PictureSet:
+Look at the admin site of the demo project. Click on any of the articles and see that the **inlines** field below the **body** allows you to choose between Picture and PictureSet:
 
 .. image:: images/tutorial_article_change_view.png
 
-Later when rendering articles detail (``example/demo/templates/articles/article_detail.html``) you have to load the ``inlines`` templatetag and apply the ``render_inlines`` filter to the ``body`` field::
+Your articles detail template (``example/demo/templates/articles/article_detail.html``) loads the ``inlines`` templatetag and apply the ``render_inlines`` filter to the ``body`` field::
 
     {% load i18n inlines %}
     ...
@@ -174,5 +160,4 @@ Later when rendering articles detail (``example/demo/templates/articles/article_
       {{ object.body|render_inlines }}
     </div>
 
-And the filter will use the template ``inline_media/templates/inline_media/inline_media_pictureset.html`` to render the inline media.
-
+You can also customize inline-media templates for pictures and picture sets.
diff --git example/demo/initial_data.json example/demo/initial_data.json
index 009a842..25ce8da 100644
--- example/demo/initial_data.json
+++ example/demo/initial_data.json
@@ -93,27 +93,10 @@
     },
     {
         "pk": 1,
-        "model": "inline_media.inlinetype",
-        "fields": {
-            "content_type": 13,
-            "title": "Picture"
-        }
-    },
-    {
-        "pk": 2,
-        "model": "inline_media.inlinetype",
-        "fields": {
-            "content_type": 14,
-            "title": "Picture Set"
-        }
-    },
-    {
-        "pk": 1,
         "model": "inline_media.license",
         "fields": {
             "link": "http://artlibre.org/licence/lal/en",
-            "name": "Free Art License",
-            "tags": "programming python"
+            "name": "Free Art License"
         }
     },
     {
@@ -121,8 +104,7 @@
         "model": "inline_media.license",
         "fields": {
             "link": "http://creativecommons.org/licenses/by/2.0/",
-            "name": "CC Attribution",
-            "tags": "django framework programming python web"
+            "name": "CC Attribution"
         }
     },
     {
@@ -130,8 +112,7 @@
         "model": "inline_media.license",
         "fields": {
             "link": "http://creativecommons.org/licenses/by-nd/2.0/",
-            "name": "CC Attribution-NoDerivs",
-            "tags": "fedora linux"
+            "name": "CC Attribution-NoDerivs"
         }
     },
     {
@@ -139,8 +120,7 @@
         "model": "inline_media.license",
         "fields": {
             "link": "http://creativecommons.org/licenses/by-nc-nd/2.0/",
-            "name": "CC Attribution-NonCommercial-NoDerivs",
-            "tags": "freebsd"
+            "name": "CC Attribution-NonCommercial-NoDerivs"
         }
     },
     {
@@ -148,8 +128,7 @@
         "model": "inline_media.license",
         "fields": {
             "link": "http://creativecommons.org/licenses/by-nc/2.0/",
-            "name": "CC Attribution-NonCommercial",
-            "tags": "gentoo linux"
+            "name": "CC Attribution-NonCommercial"
         }
     },
     {
@@ -157,8 +136,7 @@
         "model": "inline_media.license",
         "fields": {
             "link": "http://creativecommons.org/licenses/by-nc-sa/2.0/",
-            "name": "CC Attribution-NonCommercial-ShareAlike",
-            "tags": "debian linux"
+            "name": "CC Attribution-NonCommercial-ShareAlike"
         }
     },
     {
@@ -166,8 +144,7 @@
         "model": "inline_media.license",
         "fields": {
             "link": "http://creativecommons.org/licenses/by-sa/2.0/",
-            "name": "CC Attribution-ShareAlike",
-            "tags": "macosx"
+            "name": "CC Attribution-ShareAlike"
         }
     },
     {
@@ -961,7 +938,7 @@
         "fields": {
             "tag": 3,
             "object_id": 3,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -970,7 +947,7 @@
         "fields": {
             "tag": 4,
             "object_id": 3,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -979,7 +956,7 @@
         "fields": {
             "tag": 5,
             "object_id": 2,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -988,7 +965,7 @@
         "fields": {
             "tag": 6,
             "object_id": 2,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -997,7 +974,7 @@
         "fields": {
             "tag": 7,
             "object_id": 2,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1006,7 +983,7 @@
         "fields": {
             "tag": 8,
             "object_id": 2,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1015,7 +992,7 @@
         "fields": {
             "tag": 9,
             "object_id": 2,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1024,7 +1001,7 @@
         "fields": {
             "tag": 7,
             "object_id": 1,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1033,7 +1010,7 @@
         "fields": {
             "tag": 8,
             "object_id": 1,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1042,7 +1019,7 @@
         "fields": {
             "tag": 10,
             "object_id": 4,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1051,7 +1028,7 @@
         "fields": {
             "tag": 11,
             "object_id": 5,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1060,7 +1037,7 @@
         "fields": {
             "tag": 4,
             "object_id": 5,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1069,7 +1046,7 @@
         "fields": {
             "tag": 12,
             "object_id": 6,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1078,7 +1055,7 @@
         "fields": {
             "tag": 4,
             "object_id": 6,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1087,7 +1064,7 @@
         "fields": {
             "tag": 13,
             "object_id": 7,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1096,7 +1073,7 @@
         "fields": {
             "tag": 4,
             "object_id": 8,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1105,7 +1082,7 @@
         "fields": {
             "tag": 14,
             "object_id": 8,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1114,7 +1091,7 @@
         "fields": {
             "tag": 4,
             "object_id": 9,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1123,7 +1100,7 @@
         "fields": {
             "tag": 15,
             "object_id": 9,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1132,7 +1109,7 @@
         "fields": {
             "tag": 4,
             "object_id": 10,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1141,7 +1118,7 @@
         "fields": {
             "tag": 16,
             "object_id": 10,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1150,7 +1127,7 @@
         "fields": {
             "tag": 17,
             "object_id": 11,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1159,7 +1136,7 @@
         "fields": {
             "tag": 4,
             "object_id": 12,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1168,7 +1145,7 @@
         "fields": {
             "tag": 18,
             "object_id": 12,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1177,7 +1154,7 @@
         "fields": {
             "tag": 19,
             "object_id": 13,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1186,7 +1163,7 @@
         "fields": {
             "tag": 20,
             "object_id": 13,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1195,7 +1172,7 @@
         "fields": {
             "tag": 21,
             "object_id": 14,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1204,7 +1181,7 @@
         "fields": {
             "tag": 22,
             "object_id": 14,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1213,7 +1190,7 @@
         "fields": {
             "tag": 23,
             "object_id": 16,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1222,7 +1199,7 @@
         "fields": {
             "tag": 24,
             "object_id": 16,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1231,7 +1208,7 @@
         "fields": {
             "tag": 25,
             "object_id": 17,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1240,7 +1217,7 @@
         "fields": {
             "tag": 26,
             "object_id": 18,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1249,7 +1226,7 @@
         "fields": {
             "tag": 22,
             "object_id": 18,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1258,7 +1235,7 @@
         "fields": {
             "tag": 27,
             "object_id": 1,
-            "content_type": 15
+            "content_type": 14
         }
     },
     {
@@ -1267,7 +1244,7 @@
         "fields": {
             "tag": 29,
             "object_id": 20,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1276,7 +1253,7 @@
         "fields": {
             "tag": 29,
             "object_id": 19,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1285,7 +1262,7 @@
         "fields": {
             "tag": 29,
             "object_id": 21,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1294,7 +1271,7 @@
         "fields": {
             "tag": 28,
             "object_id": 21,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1303,7 +1280,7 @@
         "fields": {
             "tag": 29,
             "object_id": 22,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1312,7 +1289,7 @@
         "fields": {
             "tag": 31,
             "object_id": 22,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1321,7 +1298,7 @@
         "fields": {
             "tag": 28,
             "object_id": 22,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1330,7 +1307,7 @@
         "fields": {
             "tag": 28,
             "object_id": 23,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1339,7 +1316,7 @@
         "fields": {
             "tag": 28,
             "object_id": 2,
-            "content_type": 15
+            "content_type": 14
         }
     },
     {
@@ -1348,7 +1325,7 @@
         "fields": {
             "tag": 22,
             "object_id": 2,
-            "content_type": 15
+            "content_type": 14
         }
     },
     {
@@ -1357,7 +1334,7 @@
         "fields": {
             "tag": 32,
             "object_id": 15,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1366,7 +1343,7 @@
         "fields": {
             "tag": 28,
             "object_id": 20,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1375,7 +1352,7 @@
         "fields": {
             "tag": 28,
             "object_id": 19,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1384,7 +1361,7 @@
         "fields": {
             "tag": 29,
             "object_id": 23,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1393,7 +1370,7 @@
         "fields": {
             "tag": 33,
             "object_id": 23,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1402,7 +1379,7 @@
         "fields": {
             "tag": 20,
             "object_id": 23,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1411,7 +1388,7 @@
         "fields": {
             "tag": 22,
             "object_id": 23,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1420,7 +1397,7 @@
         "fields": {
             "tag": 33,
             "object_id": 20,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1429,7 +1406,7 @@
         "fields": {
             "tag": 20,
             "object_id": 20,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1438,7 +1415,7 @@
         "fields": {
             "tag": 22,
             "object_id": 20,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1447,7 +1424,7 @@
         "fields": {
             "tag": 34,
             "object_id": 18,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1456,7 +1433,7 @@
         "fields": {
             "tag": 20,
             "object_id": 18,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1465,7 +1442,7 @@
         "fields": {
             "tag": 22,
             "object_id": 18,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1474,7 +1451,7 @@
         "fields": {
             "tag": 35,
             "object_id": 1,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1483,7 +1460,7 @@
         "fields": {
             "tag": 35,
             "object_id": 2,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1492,7 +1469,7 @@
         "fields": {
             "tag": 35,
             "object_id": 11,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1501,7 +1478,7 @@
         "fields": {
             "tag": 4,
             "object_id": 8,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1510,7 +1487,7 @@
         "fields": {
             "tag": 35,
             "object_id": 8,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1519,7 +1496,7 @@
         "fields": {
             "tag": 4,
             "object_id": 10,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1528,7 +1505,7 @@
         "fields": {
             "tag": 35,
             "object_id": 10,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1537,7 +1514,7 @@
         "fields": {
             "tag": 4,
             "object_id": 12,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1546,7 +1523,7 @@
         "fields": {
             "tag": 35,
             "object_id": 12,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1555,7 +1532,7 @@
         "fields": {
             "tag": 33,
             "object_id": 22,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1564,7 +1541,7 @@
         "fields": {
             "tag": 20,
             "object_id": 22,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1573,7 +1550,7 @@
         "fields": {
             "tag": 22,
             "object_id": 22,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1582,7 +1559,7 @@
         "fields": {
             "tag": 33,
             "object_id": 19,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1591,7 +1568,7 @@
         "fields": {
             "tag": 20,
             "object_id": 19,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1600,7 +1577,7 @@
         "fields": {
             "tag": 22,
             "object_id": 19,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1609,7 +1586,7 @@
         "fields": {
             "tag": 33,
             "object_id": 15,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1618,7 +1595,7 @@
         "fields": {
             "tag": 20,
             "object_id": 15,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1627,7 +1604,7 @@
         "fields": {
             "tag": 36,
             "object_id": 15,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1636,7 +1613,7 @@
         "fields": {
             "tag": 33,
             "object_id": 21,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1645,7 +1622,7 @@
         "fields": {
             "tag": 20,
             "object_id": 21,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1654,7 +1631,7 @@
         "fields": {
             "tag": 22,
             "object_id": 21,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1663,7 +1640,7 @@
         "fields": {
             "tag": 37,
             "object_id": 17,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1672,7 +1649,7 @@
         "fields": {
             "tag": 20,
             "object_id": 17,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1681,7 +1658,7 @@
         "fields": {
             "tag": 38,
             "object_id": 17,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1690,7 +1667,7 @@
         "fields": {
             "tag": 20,
             "object_id": 16,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1699,7 +1676,7 @@
         "fields": {
             "tag": 38,
             "object_id": 16,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1708,7 +1685,7 @@
         "fields": {
             "tag": 39,
             "object_id": 16,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1717,7 +1694,7 @@
         "fields": {
             "tag": 40,
             "object_id": 14,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1726,7 +1703,7 @@
         "fields": {
             "tag": 20,
             "object_id": 14,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1735,7 +1712,7 @@
         "fields": {
             "tag": 22,
             "object_id": 14,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1744,7 +1721,7 @@
         "fields": {
             "tag": 40,
             "object_id": 13,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1753,7 +1730,7 @@
         "fields": {
             "tag": 20,
             "object_id": 13,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1762,7 +1739,7 @@
         "fields": {
             "tag": 36,
             "object_id": 13,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1771,7 +1748,7 @@
         "fields": {
             "tag": 4,
             "object_id": 9,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1780,7 +1757,7 @@
         "fields": {
             "tag": 35,
             "object_id": 9,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1789,7 +1766,7 @@
         "fields": {
             "tag": 41,
             "object_id": 7,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1798,7 +1775,7 @@
         "fields": {
             "tag": 35,
             "object_id": 7,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1807,7 +1784,7 @@
         "fields": {
             "tag": 4,
             "object_id": 6,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1816,7 +1793,7 @@
         "fields": {
             "tag": 35,
             "object_id": 6,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1825,7 +1802,7 @@
         "fields": {
             "tag": 4,
             "object_id": 5,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1834,7 +1811,7 @@
         "fields": {
             "tag": 35,
             "object_id": 5,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1843,7 +1820,7 @@
         "fields": {
             "tag": 35,
             "object_id": 4,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1852,7 +1829,7 @@
         "fields": {
             "tag": 42,
             "object_id": 4,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1861,7 +1838,7 @@
         "fields": {
             "tag": 4,
             "object_id": 3,
-            "content_type": 13
+            "content_type": 12
         }
     },
     {
@@ -1870,70 +1847,7 @@
         "fields": {
             "tag": 35,
             "object_id": 3,
-            "content_type": 13
-        }
-    },
-    {
-        "pk": 113,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 43,
-            "object_id": 7,
-            "content_type": 12
-        }
-    },
-    {
-        "pk": 114,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 43,
-            "object_id": 1,
-            "content_type": 12
-        }
-    },
-    {
-        "pk": 115,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 43,
-            "object_id": 2,
-            "content_type": 12
-        }
-    },
-    {
-        "pk": 116,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 43,
-            "object_id": 3,
-            "content_type": 12
-        }
-    },
-    {
-        "pk": 117,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 43,
-            "object_id": 4,
-            "content_type": 12
-        }
-    },
-    {
-        "pk": 118,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 43,
-            "object_id": 5,
-            "content_type": 12
-        }
-    },
-    {
-        "pk": 119,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 43,
-            "object_id": 6,
             "content_type": 12
         }
     }
-]
\ No newline at end of file
+]
diff --git example/demo/settings.py example/demo/settings.py
index f208838..3e3940e 100644
--- example/demo/settings.py
+++ example/demo/settings.py
@@ -177,6 +177,8 @@ INLINE_MEDIA_TEXTAREA_ATTRS = {
 
 INLINE_MEDIA_CUSTOM_SIZES = {
     'inline_media.picture':    { 'large': 310 },
-    'inline_media.pictureset': { 'large': (288, 240) }
+    'inline_media.pictureset': { 
+        'small': None,
+        'large': (288, 240),
+    }
 }
-
diff --git example/demo_wysihtml5/initial_data.json example/demo_wysihtml5/initial_data.json
index 4410932..7b7ac8f 100644
--- example/demo_wysihtml5/initial_data.json
+++ example/demo_wysihtml5/initial_data.json
@@ -93,22 +93,6 @@
     },
     {
         "pk": 1,
-        "model": "inline_media.inlinetype",
-        "fields": {
-            "content_type": 13,
-            "title": "Picture"
-        }
-    },
-    {
-        "pk": 2,
-        "model": "inline_media.inlinetype",
-        "fields": {
-            "content_type": 14,
-            "title": "Picture Set"
-        }
-    },
-    {
-        "pk": 1,
         "model": "inline_media.license",
         "fields": {
             "link": "http://artlibre.org/licence/lal/en",
@@ -852,66 +836,12 @@
         }
     },
     {
-        "pk": 1,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 1,
-            "object_id": 7,
-            "content_type": 13
-        }
-    },
-    {
-        "pk": 2,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 1,
-            "object_id": 6,
-            "content_type": 13
-        }
-    },
-    {
-        "pk": 3,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 1,
-            "object_id": 5,
-            "content_type": 13
-        }
-    },
-    {
-        "pk": 4,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 1,
-            "object_id": 4,
-            "content_type": 13
-        }
-    },
-    {
-        "pk": 5,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 1,
-            "object_id": 3,
-            "content_type": 13
-        }
-    },
-    {
-        "pk": 6,
-        "model": "tagging.taggeditem",
-        "fields": {
-            "tag": 1,
-            "object_id": 2,
-            "content_type": 13
-        }
-    },
-    {
         "pk": 7,
         "model": "tagging.taggeditem",
         "fields": {
             "tag": 3,
             "object_id": 3,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -920,7 +850,7 @@
         "fields": {
             "tag": 4,
             "object_id": 3,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -929,7 +859,7 @@
         "fields": {
             "tag": 5,
             "object_id": 2,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -938,7 +868,7 @@
         "fields": {
             "tag": 6,
             "object_id": 2,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -947,7 +877,7 @@
         "fields": {
             "tag": 7,
             "object_id": 2,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -956,7 +886,7 @@
         "fields": {
             "tag": 8,
             "object_id": 2,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -965,7 +895,7 @@
         "fields": {
             "tag": 9,
             "object_id": 2,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -974,7 +904,7 @@
         "fields": {
             "tag": 7,
             "object_id": 1,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -983,7 +913,7 @@
         "fields": {
             "tag": 8,
             "object_id": 1,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -992,7 +922,7 @@
         "fields": {
             "tag": 10,
             "object_id": 4,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1001,7 +931,7 @@
         "fields": {
             "tag": 11,
             "object_id": 5,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1010,7 +940,7 @@
         "fields": {
             "tag": 4,
             "object_id": 5,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1019,7 +949,7 @@
         "fields": {
             "tag": 12,
             "object_id": 6,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1028,7 +958,7 @@
         "fields": {
             "tag": 4,
             "object_id": 6,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1037,7 +967,7 @@
         "fields": {
             "tag": 13,
             "object_id": 7,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1046,7 +976,7 @@
         "fields": {
             "tag": 4,
             "object_id": 8,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1055,7 +985,7 @@
         "fields": {
             "tag": 14,
             "object_id": 8,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1064,7 +994,7 @@
         "fields": {
             "tag": 4,
             "object_id": 9,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1073,7 +1003,7 @@
         "fields": {
             "tag": 15,
             "object_id": 9,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1082,7 +1012,7 @@
         "fields": {
             "tag": 4,
             "object_id": 10,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1091,7 +1021,7 @@
         "fields": {
             "tag": 16,
             "object_id": 10,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1100,7 +1030,7 @@
         "fields": {
             "tag": 17,
             "object_id": 11,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1109,7 +1039,7 @@
         "fields": {
             "tag": 4,
             "object_id": 12,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1118,7 +1048,7 @@
         "fields": {
             "tag": 18,
             "object_id": 12,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1127,7 +1057,7 @@
         "fields": {
             "tag": 19,
             "object_id": 13,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1136,7 +1066,7 @@
         "fields": {
             "tag": 20,
             "object_id": 13,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1145,7 +1075,7 @@
         "fields": {
             "tag": 21,
             "object_id": 14,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1154,7 +1084,7 @@
         "fields": {
             "tag": 22,
             "object_id": 14,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1163,7 +1093,7 @@
         "fields": {
             "tag": 23,
             "object_id": 16,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1172,7 +1102,7 @@
         "fields": {
             "tag": 24,
             "object_id": 16,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1181,7 +1111,7 @@
         "fields": {
             "tag": 25,
             "object_id": 17,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1190,7 +1120,7 @@
         "fields": {
             "tag": 26,
             "object_id": 18,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1199,7 +1129,7 @@
         "fields": {
             "tag": 22,
             "object_id": 18,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1208,7 +1138,7 @@
         "fields": {
             "tag": 27,
             "object_id": 1,
-            "content_type": 15
+            "content_type": 14
         }
     },
     {
@@ -1217,7 +1147,7 @@
         "fields": {
             "tag": 29,
             "object_id": 20,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1226,7 +1156,7 @@
         "fields": {
             "tag": 29,
             "object_id": 19,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1235,7 +1165,7 @@
         "fields": {
             "tag": 29,
             "object_id": 21,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1244,7 +1174,7 @@
         "fields": {
             "tag": 28,
             "object_id": 21,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1253,7 +1183,7 @@
         "fields": {
             "tag": 29,
             "object_id": 22,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1262,7 +1192,7 @@
         "fields": {
             "tag": 31,
             "object_id": 22,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1271,7 +1201,7 @@
         "fields": {
             "tag": 28,
             "object_id": 22,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1280,7 +1210,7 @@
         "fields": {
             "tag": 28,
             "object_id": 23,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1289,7 +1219,7 @@
         "fields": {
             "tag": 28,
             "object_id": 2,
-            "content_type": 15
+            "content_type": 14
         }
     },
     {
@@ -1298,7 +1228,7 @@
         "fields": {
             "tag": 22,
             "object_id": 2,
-            "content_type": 15
+            "content_type": 14
         }
     },
     {
@@ -1307,7 +1237,7 @@
         "fields": {
             "tag": 32,
             "object_id": 15,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1316,7 +1246,7 @@
         "fields": {
             "tag": 28,
             "object_id": 20,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1325,7 +1255,7 @@
         "fields": {
             "tag": 28,
             "object_id": 19,
-            "content_type": 14
+            "content_type": 13
         }
     },
     {
@@ -1334,7 +1264,7 @@
         "fields": {
             "tag": 29,
             "object_id": 23,
-            "content_type": 14
+            "content_type": 13
         }
     }
 ]
\ No newline at end of file
diff --git inline_media/__init__.py inline_media/__init__.py
index 7983a50..79efef7 100644
--- inline_media/__init__.py
+++ inline_media/__init__.py
@@ -1,7 +1,7 @@
 """
 django_inline_media - Simple Django app that allows insertion of inline media objects in text fields.
 """
-VERSION = (1, 1, 0, 'a', 6) # following PEP 386
+VERSION = (1, 1, 0, 'b', 1) # following PEP 386
 
 def get_version():
     version = '%s.%s' % (VERSION[0], VERSION[1])
diff --git inline_media/admin.py inline_media/admin.py
index 266f3d7..697cfd1 100644
--- inline_media/admin.py
+++ inline_media/admin.py
@@ -3,7 +3,7 @@ from django.contrib import admin
 from django.contrib.admin.util import unquote
 
 from inline_media.fields import TextFieldWithInlines
-from inline_media.models import InlineType, License, Picture, PictureSet
+from inline_media.models import License, Picture, PictureSet
 from inline_media.widgets import TextareaWithInlines
 
 
@@ -85,7 +85,7 @@ class PictureSetAdmin(admin.ModelAdmin):
         return response
 
 
-admin.site.register(InlineType)
+# admin.site.register(InlineType)
 admin.site.register(License, LicenseAdmin)
 admin.site.register(Picture, PictureAdmin)
 admin.site.register(PictureSet, PictureSetAdmin)
diff --git inline_media/conf/defaults.py inline_media/conf/defaults.py
index e3ba698..3fb00af 100644
--- inline_media/conf/defaults.py
+++ inline_media/conf/defaults.py
@@ -2,11 +2,19 @@
 
 from django.conf import settings
 
+INLINE_MEDIA_DEBUG = False
+
 # Defaulted to Django 1.4 path
 ADMIN_IMAGES_PATH = getattr(settings, 
                             "ADMIN_IMAGES_PATH", 
                             "%s/admin/img" % settings.STATIC_URL)
 
+# Defines available inline types.
+INLINE_MEDIA_TYPES = [
+    'inline_media.picture',
+    'inline_media.pictureset',
+]
+
 # Defines custom picture sizes for app_label.model and size_type combinations.
 # It's a 2-level depth dictionary with 'app_label.model' as keys for the 
 # 1st level and 'size_type' as keys for the 2nd level. There are 5 size_types
@@ -24,10 +32,9 @@ INLINE_MEDIA_CUSTOM_SIZES =  {
         'small': 150,
         'medium': 200,
         'large': 250,
-        'full': 'full'
     },
     'inline_media.pictureset': {
-        'mini': (58, 58),
+        'mini': None,
         'small': (128, 128),
         'medium': (178, 178),
         'large': (228, 228),
@@ -35,9 +42,5 @@ INLINE_MEDIA_CUSTOM_SIZES =  {
     }
 }
 
-# Default size in case the entry corresponding to an app_label.model and 
-# size_type does not exist in INLINE_MEDIA_CUSTOM_SIZES
-INLINE_MEDIA_DEFAULT_SIZE = 200
-
 # Quick way to site-wide change attributes of TextareaWithInlines widget
 INLINE_MEDIA_TEXTAREA_ATTRS = {}
diff --git inline_media/models.py inline_media/models.py
index d582120..4f37ea9 100644
--- inline_media/models.py
+++ inline_media/models.py
@@ -18,23 +18,6 @@ from inline_media.conf import settings
 
 storage = Storage()
 
-#----------------------------------------------------------------------
-# InlineType code borrowed from django-basic-apps by Nathan Borror
-# https://github.com/nathanborror/django-basic-apps
-
-class InlineType(models.Model):
-    """InlineType model"""
-    title           = models.CharField(max_length=200)
-    content_type    = models.ForeignKey(ContentType)
-
-    class Meta:
-        db_table = 'inline_types'
-
-    def __unicode__(self):
-        return self.title
-
-
-#----------------------------------------------------------------------
 LICENSES = (('http://artlibre.org/licence/lal/en',
              'Free Art License'),
             ('http://creativecommons.org/licenses/by/2.0/',
diff --git inline_media/parser.py inline_media/parser.py
index c36622e..cbe4917 100644
--- inline_media/parser.py
+++ inline_media/parser.py
@@ -9,6 +9,7 @@ from django.http import Http404
 from django.utils.encoding import smart_unicode
 from django.template.loader import render_to_string
 from django.utils.safestring import mark_safe
+from django.utils.translation import ugettext as _
 
 try:
     from BeautifulSoup import BeautifulSoup, NavigableString
@@ -25,105 +26,146 @@ def inlines(value, return_list=False):
     if return_list:
         for inline in soup.findAll('inline'):
             rendered_inline = render_inline(inline)
-            inline_list.append(rendered_inline['context'])
+            if rendered_inline:
+                inline_list.append(rendered_inline['context'])
         return inline_list
     else:
         for inline in soup.findAll('inline'):
             rendered_inline = render_inline(inline)
-            rendered_item = BeautifulSoup(
-                render_to_string(rendered_inline['template'], 
-                                 rendered_inline['context']),
-                selfClosingTags=selfClosingTags)
+            if rendered_inline:
+                rendered_item = BeautifulSoup(
+                    render_to_string(rendered_inline['template'], 
+                                     rendered_inline['context']),
+                    selfClosingTags=selfClosingTags)
+            else:
+                rendered_item = ''
             inline.replaceWith(rendered_item)
         return mark_safe(soup)
 
 
-regexp = re.compile(r'^inline_(?P<size_type>\w+)_\w+$')
+#--------------------------------------------------
+# Helpers for function 'render_inline'
 
-def render_inline(inline):
-    """
-    Replace inline markup with template markup that matches the
-    appropriate app and model.
+def get_app_model_tuple(inline):
+    """Retrieve app_label and model_name strings from a given inline tag.
 
+    :param BeautifulSoup.Tag inline: Inline element found in a beautiful soup.
     """
-
-    # Look for the type attribute with 'app.model'
     try:
         inline_type = inline['type']
-        app_label, model_name = inline_type.split('.')
+        chunks = inline_type.split('.')
+        app_label = '.'.join(chunks[:-1])
+        model_name = chunks[-1]
     except:
-        if settings.DEBUG:
-            raise TemplateSyntaxError, "Couldn't find the attribute 'type' in the <inline> tag."
-        else:
-            return ''
+        if settings.INLINE_MEDIA_DEBUG:
+            raise TemplateSyntaxError, _(u"Couldn't find the attribute "
+                                         "'type' in the <inline> tag.")
+        return ''
+    else:
+        return app_label, model_name
 
-    # Get the content type
+
+def get_model(app_label, model_name):
+    """Retrive the model class from a given app_label & model strings."""
     try:
-        content_type = ContentType.objects.get(app_label=app_label, model=model_name)
+        content_type = ContentType.objects.get(app_label=app_label, 
+                                               model=model_name)
         model = content_type.model_class()
     except ContentType.DoesNotExist:
-        if settings.DEBUG:
-            raise TemplateSyntaxError, "Inline ContentType not found."
-        else:
-            return ''
+        if settings.INLINE_MEDIA_DEBUG:
+            raise TemplateSyntaxError, _(u"Inline ContentType not found.")
+        return None
+    return model
 
-    # Look for the CSS class attribute
-    try:
-        inline_class = smart_unicode(inline['class'])
-    except:
-        if settings.DEBUG:
-            raise TemplateSyntaxError, "Couldn't find the attribute 'class' in the <inline> tag."
-        else:
-            return ''
 
-    # Get the size associated with the inline_class
+def get_css_class(inline):
+    """Retrieve the CSS class from a given inline tag."""
     try:
-        match = regexp.match(inline_class)
-        if match:
-            size_type = match.group('size_type')
-        size = settings.INLINE_MEDIA_CUSTOM_SIZES[inline_type][size_type]
+        css_class = smart_unicode(inline['class'])
     except:
-        size = settings.INLINE_MEDIA_DEFAULT_SIZE
+        if settings.INLINE_MEDIA_DEBUG:
+            raise TemplateSyntaxError, _(u"Couldn't find the attribute "
+                                         "'class' in the <inline> tag.")
+        return ''
+    return css_class
+
+
+size_regexp = re.compile(r'^inline_(?P<size_class>\w+)_\w+$')
+
+def get_size(inline_type, css_class):
+    """Get the size for the given inline tag.
+    
+    :param str inline_type: an 'app_label.model_name' for an inline type.
+    :param str css_class: any of the valid inline_media css classes.
+    
+    Valid values for css_class are:
+    'inline_(mini|small|medium|large|full)_(left|right)' and
+    'inline_full_center'.
+
+    Inline type registration in INLINE_MEDIA_CUSTOM_SIZES is not mandatory.
+    It might be that the 'inline_type' is not registered in the setting,
+    but if the 'css_class' is correct, a template will be use to render the 
+    inline. 
+    """
+    match = size_regexp.match(css_class)
+    if match:
+        size_class = match.group('size_class')
+    else:
+        size_class = None
+    custom_sizes = settings.INLINE_MEDIA_CUSTOM_SIZES.get(inline_type, None)
+    if custom_sizes and custom_sizes.has_key(size_class):
+        size = custom_sizes[size_class]
+        if not size:
+            size_class = None
+        if type(size) == int:
+            size = '%d' % size
+        elif type(size) == tuple:
+            size = '%dx%d' % size
+    else:
+        size = None
+    return (size, size_class)
 
-    if type(size) == int:
-        size = '%d' % size
-    elif type(size) == tuple:
-        size = '%dx%d' % size
 
+def render_inline(inline):
+    """
+    Replace inline markup with template markup that matches the
+    appropriate app and model.
+
+    """
+    app_label, model_name = get_app_model_tuple(inline)
+    model = get_model(app_label, model_name)
+    css_class = get_css_class(inline)
+    size, size_class = get_size(inline['type'], css_class)
+
+    if not size_class: 
+        if settings.INLINE_MEDIA_DEBUG:
+            raise Exception("Size for class '%s' is explicitly disabled "
+                            "in settings.INLINE_MEDIA_CUSTOM_SIZES "
+                            "for app.model '%s.%s'." % (app_label, model_name))
+        else:
+            return ""
+        
     try:
-        try:
-            id_list = [int(i) for i in inline['ids'].split(',')]
-            obj_list = model.objects.in_bulk(id_list)
-            obj_list = list(obj_list[int(i)] for i in id_list)
-            context = { 'object_list': obj_list, 
-                        'class': inline_class,
-                        'size': size }
-        except ValueError:
-            if settings.DEBUG:
-                raise ValueError, "The <inline> ids attribute is missing or invalid."
-            else:
-                return ''
-    except KeyError:
-        try:
-            obj = model.objects.get(pk=inline['id'])
-            context = { 'content_type':"%s.%s" % (app_label, model_name), 
-                        'object':obj, 
-                        'class': inline_class,
-                        'size': size }
-        except model.DoesNotExist:
-            if settings.DEBUG:
-                raise model.DoesNotExist, "Object matching '%s' does not exist"
-            else:
-                return ''
-        except:
-            if settings.DEBUG:
-                raise TemplateSyntaxError, "The <inline> id attribute is missing or invalid."
-            else:
-                return ''
+        obj = model.objects.get(pk=inline['id'])
+        context = { 'content_type':"%s.%s" % (app_label, model_name), 
+                    'object':obj, 
+                    'class': css_class,
+                    'size': size }
+    except model.DoesNotExist:
+        if settings.INLINE_MEDIA_DEBUG:
+            raise model.DoesNotExist("Object matching '%s' does not exist")
+        else:
+            return ""
+    except:
+        if settings.INLINE_MEDIA_DEBUG:
+            raise TemplateSyntaxError("The <inline> id attribute is "
+                                      "missing or invalid.")
+        else:
+            return ""
 
     rendered_inline = {
         'template': [
-            "inline_media/%s.%s.%s.html" % (app_label, model_name, size_type),
+            "inline_media/%s.%s.%s.html" % (app_label, model_name, size_class),
             "inline_media/%s.%s.default.html" % (app_label, model_name) ],
         'context': context}
     return rendered_inline
diff --git inline_media/static/admin/inline_media/js/inlines.js inline_media/static/admin/inline_media/js/inlines.js
index e7094c4..98fb0d9 100644
--- inline_media/static/admin/inline_media/js/inlines.js
+++ inline_media/static/admin/inline_media/js/inlines.js
@@ -2,6 +2,16 @@ function insertInline(type, id, classname, name) {
     if (type != '----------' && id != '') {
         inline = '<inline type="'+type.replace('/', '.')+'" id="'+id+'" class="'+classname+'" />';
         field = document.getElementById('id_'+name);
-        field.value = field.value + inline + '\n';
+	if (document.selection) { // IE
+	    field.focus();
+	    sel = document.selection.createRange();
+	    sel.text = inline;
+	} else if (field.selectionStart || field.selectionStart == '0') { // others
+	    field.value = field.value.substring(0, field.selectionStart) + inline
+		+ field.value.substring(field.selectionEnd, field.value.length);
+	} else {
+	    field.value += inline;
+	}
     }
 }
+
diff --git inline_media/templatetags/inlines.py inline_media/templatetags/inlines.py
index 290d71c..9140417 100644
--- inline_media/templatetags/inlines.py
+++ inline_media/templatetags/inlines.py
@@ -3,7 +3,7 @@
 
 from django import template
 from inline_media.parser import inlines
-from inline_media.models import InlineType
+# from inline_media.models import InlineType
 import re
 
 register = template.Library()
@@ -49,36 +49,3 @@ def render_inlines(value):
 @register.filter
 def extract_inlines(value):
     return inlines(value, True)
-
-
-class InlineTypes(template.Node):
-    def __init__(self, var_name):
-        self.var_name = var_name
-
-    def render(self, context):
-        types = InlineType.objects.all()
-        context[self.var_name] = types
-        return ''
-
-@register.tag(name='get_inline_types')
-def do_get_inline_types(parser, token):
-    """
-    Gets all inline types.
-
-    Syntax::
-
-        {% get_inline_types as [var_name] %}
-
-    Example usage::
-
-        {% get_inline_types as inline_list %}
-    """
-    try:
-        tag_name, arg = token.contents.split(None, 1)
-    except ValueError:
-        raise template.TemplateSyntaxError, "%s tag requires arguments" % token.contents.split()[0]
-    m = re.search(r'as (\w+)', arg)
-    if not m:
-        raise template.TemplateSyntaxError, "%s tag had invalid arguments" % tag_name
-    var_name = m.groups()[0]
-    return InlineTypes(var_name)
diff --git inline_media/tests/settings.py inline_media/tests/settings.py
index 82efa80..ca3ee94 100644
--- inline_media/tests/settings.py
+++ inline_media/tests/settings.py
@@ -91,8 +91,18 @@ THUMBNAIL_FORMAT = "JPEG"
 #THUMBNAIL_STORAGE = "inline_media.tests.storage.TestStorage"
 # ADMIN_IMAGES_PATH = "%s/admin/img/admin" % STATIC_URL # Django 1.3
 
+INLINE_MEDIA_TYPES = [
+    'inline_media.picture',
+    'inline_media.pictureset',
+    'inline_media.tests.testmediamodel',
+]
+
 INLINE_MEDIA_CUSTOM_SIZES = {
-    'inline_media.picture': { 'mini': 81 }
+    'inline_media.picture': { 'mini': 81 },
+    'inline_media.pictureset': { 
+        # by default -> 'mini': None # see inline_media/conf/defaults.py
+        'small': None
+    }
 }
 
 INLINE_MEDIA_TEXTAREA_ATTRS = {
@@ -103,3 +113,5 @@ INLINE_MEDIA_TEXTAREA_ATTRS = {
         'second_text': { 'rows': '20' }
     }
 }
+
+INLINE_MEDIA_DEBUG = True
diff --git inline_media/tests/test_conf.py inline_media/tests/test_conf.py
index cd1ea52..4c6c52f 100644
--- inline_media/tests/test_conf.py
+++ inline_media/tests/test_conf.py
@@ -14,8 +14,7 @@ class ConfTestCase(DjangoTestCase):
     def test_custom_sizes_setting(self):
         self.assertEqual(CUSTOM_SIZES['inline_media.picture']['mini'], 81)
         self.assertEqual(CUSTOM_SIZES['inline_media.picture']['small'], 150)
-        self.assertEqual(CUSTOM_SIZES['inline_media.pictureset']['mini'], 
-                         (58, 58))
+        self.assertEqual(CUSTOM_SIZES['inline_media.pictureset']['mini'], None)
         
     def test_textarea_attrs_setting(self):
         self.assertTrue(TEXTAREA_ATTRS.get('default', False)) 
diff --git inline_media/tests/test_parser.py inline_media/tests/test_parser.py
index 8af4a1a..6d22eb7 100644
--- inline_media/tests/test_parser.py
+++ inline_media/tests/test_parser.py
@@ -4,13 +4,14 @@ import os
 
 from BeautifulSoup import BeautifulSoup, NavigableString, Tag
 
-from django.contrib.contenttypes.models import ContentType
 from django.core.files.images import ImageFile
+from django.template import TemplateSyntaxError
 from django.test import TestCase as DjangoTestCase
 
 from inline_media.conf import settings
-from inline_media.models import InlineType, Picture
-from inline_media.parser import inlines, render_inline
+from inline_media.models import Picture
+from inline_media.parser import (inlines, render_inline, get_app_model_tuple, 
+                                 get_model, get_css_class, get_size)
 from inline_media.widgets import TextareaWithInlines
 from inline_media.tests.models import TestModel, TestMediaModel
 
@@ -20,10 +21,6 @@ selfClosingTags = ['inline','img','br','input','meta','link','hr']
 
 class ParserTestCase(DjangoTestCase):
     def setUp(self):
-        test_content_type = ContentType.objects.get(app_label="tests", 
-                                                    model="testmediamodel")
-        InlineType.objects.create(title="testobj", 
-                                  content_type=test_content_type)
         self.obj = TestMediaModel.objects.create(title="The Title", 
                                                  description="Blah blah ...")
         self.tag = (u'<inline type="%(type)s" id="%(id)d" class="%(class)s"'
@@ -72,7 +69,6 @@ class BeautifulSoupTestCase(DjangoTestCase):
                     html_content += "%s" % entry
             return html_content
 
-        selfClosingTags = ['inline','img','br','input','meta','link','hr']
         value = u'<p>The <a href="https://www.djangoproject.com/foundation/">Django Software Foundation (DSF)</a> is kicking off the new year with a <a href="https://www.djangoproject.com/foundation/corporate-membership/">corporate membership</a> drive. Membership of the DSF is one tangible way that your company can publicly demonstrate its support for the Django project, and give back to the Open Source community that has developed Django.</p><p><inline type="inline_media.picture" id="3" class="inline_medium_right" />To kick off this membership drive, we\'re proud to announce our first two corporate members: <a href="http://www.imagescape.com/">Imaginary Landscapes</a> and the <a href="http://www.caktusgroup.com/">Caktus Consulting Group</a>. The DSF would like to thank these two companies for their generous contributions, and for their public support of the DSF and it\'s mission.</p>'
         docsoup = BeautifulSoup(value, selfClosingTags=selfClosingTags)
 
@@ -93,9 +89,6 @@ class PictureTemplatesTestCase(DjangoTestCase):
         curdir = os.path.dirname(__file__)
         img = ImageFile(open(os.path.join(curdir, "images/android.png"), "rb"))
         pic = Picture.objects.create(title="android original", picture=img)
-        ct_picture = ContentType.objects.get(app_label='inline_media', 
-                                             model='picture')
-        InlineType.objects.create(title="Picture", content_type=ct_picture)
         self.tag = u'<inline type="%(type)s" id="%(id)d" class="%(class)s" />'
         self.params = { "type": "inline_media.picture", "id": pic.id }
 
@@ -142,5 +135,99 @@ class PictureTemplatesTestCase(DjangoTestCase):
         inline_tag = self.tag % self.params
         soup = BeautifulSoup(inline_tag, selfClosingTags=selfClosingTags)
         rendered_inline = render_inline(soup.find("inline"))
+        custom_sizes = settings.INLINE_MEDIA_CUSTOM_SIZES
         self.assertEqual(int(rendered_inline['context']['size']),
-                         settings.INLINE_MEDIA_CUSTOM_SIZES['inline_media.picture']['mini'])
+                         custom_sizes['inline_media.picture']['mini'])
+
+
+class ParserHelpersTestCase(DjangoTestCase):
+    def setUp(self):
+        html = ('<p><inline type="inline_media.picture" id="3" '
+                'class="inline_medium_right" />To kick off this...</p>')
+        selfClosingTags = ['inline',]        
+        soup = BeautifulSoup(html, selfClosingTags=selfClosingTags)
+        self.inline = soup.findAll('inline')[0]
+
+    def test_get_app_model_tuple(self):
+        self.assertEqual(get_app_model_tuple(self.inline),
+                         ('inline_media', 'picture'))
+
+    def test_get_model(self):
+        self.assertEqual(get_model('inline_media', 'picture'), Picture)
+
+    def test_get_css_class(self):
+        self.assertEqual(get_css_class(self.inline), 'inline_medium_right')
+
+class ParserHelpersBadInlineTestCase(DjangoTestCase):
+    def setUp(self):
+        html = ('<p><inline type="inline_media.pictuRRRU" id="3" '
+                'classSSS="inline_medium_right" />To kick off this...</p>')
+        selfClosingTags = ['inline',]        
+        soup = BeautifulSoup(html, selfClosingTags=selfClosingTags)
+        self.inline = soup.findAll('inline')[0]
+
+    def test_get_model_raises_template_syntax_error(self):
+        with self.assertRaises(TemplateSyntaxError):
+            get_model('inline_media', 'picturegkjr')
+
+    def test_get_css_class_raises_template_syntax_error(self):
+        with self.assertRaises(TemplateSyntaxError):
+            get_css_class(self.inline)
+        
+
+class ParserHelperGetSizeTestCase(DjangoTestCase):
+    def test_with_wrong_size_class(self):
+        inline_type = 'inline_media.picture'
+        css_class = 'inlime_mediuN_bright'
+        self.assert_(get_size(inline_type, css_class) == (None, None))
+
+    def test_with_wrong_inline_type(self):
+        inline_type = 'inliMe_meRDE.pictuRR'
+        css_class = 'inline_medium_right'
+        self.assert_(get_size(inline_type, css_class) == (None, 'medium'))
+
+    def test_with_modified_class(self):
+        inline_type = 'inline_media.picture'
+        css_class = 'inline_mini_right'
+        self.assert_(get_size(inline_type, css_class) == ('81', 'mini'))
+
+    def test_with_disabled_class(self):
+        inline_type = 'inline_media.pictureset'
+        css_class = 'inline_small_left'
+        self.assert_(get_size(inline_type, css_class) == (None, None))
+        css_class = 'inline_small_right'
+        self.assert_(get_size(inline_type, css_class) == (None, None))
+
+    def test_with_regular_picture(self):
+        inline_type = 'inline_media.picture'
+        css_class = 'inline_medium_right'
+        self.assert_(get_size(inline_type, css_class) == ('200', 'medium'))
+
+
+class RenderInlineTestCase(DjangoTestCase):
+    def test_raises_when_not_size_class(self):
+        html = ('<p><inline type="inline_media.picture" id="3" '
+                'class="inline_mediuN_right" />To kick off this...</p>')
+        selfClosingTags = ['inline',]        
+        soup = BeautifulSoup(html, selfClosingTags=selfClosingTags)
+        inline = soup.findAll('inline')[0]
+        with self.assertRaises(Exception):
+            render_inline(inline)
+
+    def test_raises_when_object_does_not_exist(self):
+        html = ('<p><inline type="inline_media.picture" id="30000" '
+                'class="inline_medium_right" />To kick off this...</p>')
+        selfClosingTags = ['inline',]        
+        soup = BeautifulSoup(html, selfClosingTags=selfClosingTags)
+        inline = soup.findAll('inline')[0]
+        with self.assertRaises(Picture.DoesNotExist):
+            render_inline(inline)
+
+    def test_raises_when_no_inline_has_no_id_attribute(self):
+        html = ('<p><inline type="inline_media.picture" '
+                'class="inline_medium_right" />To kick off this...</p>')
+        selfClosingTags = ['inline',]        
+        soup = BeautifulSoup(html, selfClosingTags=selfClosingTags)
+        inline = soup.findAll('inline')[0]
+        with self.assertRaises(TemplateSyntaxError):
+            render_inline(inline)
diff --git inline_media/tests/test_templates.py inline_media/tests/test_templates.py
index e87761c..236718e 100644
--- inline_media/tests/test_templates.py
+++ inline_media/tests/test_templates.py
@@ -4,6 +4,7 @@ try:
 except ImportError:
     from beautifulsoup import BeautifulSoup, NavigableString
 
+from django.template import TemplateSyntaxError
 from django.test import TestCase as DjangoTestCase
 
 from inline_media.models import PictureSet
@@ -261,45 +262,20 @@ class PictureSetTemplateTestCase(DjangoTestCase):
         self.picset.save()
 
     def test_mini_with_default_options(self):
+        # size disabled in tests.settings.INLINE_MEDIA_CUSTOM_SIZES
         tmpl = 'inline_media/inline_media.pictureset.mini.html'
         positions = ['inline_mini_left', 'inline_mini_right']
         for cssclass in positions:
-            html = inlines(self.tag % cssclass, return_list=False)
-            self.assertTemplateUsed(html, tmpl)
-            # default options:
-            #  - show_description_inline = True
-            #  - show_counter = False
-            # But! template for size 'mini' never includes 
-            # picture's description or counter
-            soup = BeautifulSoup(html)
-            links = soup.findAll('a')
-            self.assert_(len(links) == 3)
-            # check order
-            order = [int(x)-1 for x in self.picset.order.split(",")]
-            for idx, link in zip(order, links):
-                self.assert_(link['href'] == self.pics[idx].url)
-            self.assert_(html.find('inline_description') == -1)
-            self.assert_(html.find('inline_counter') == -1)
+            with self.assertRaises(Exception):
+                html = inlines(self.tag % cssclass, return_list=False)
 
     def test_small_with_default_options(self):
+        # size disabled in tests.settings.INLINE_MEDIA_CUSTOM_SIZES
         tmpl = 'inline_media/inline_media.pictureset.default.html'
         positions = ['inline_small_left', 'inline_small_right']
         for cssclass in positions:
-            html = inlines(self.tag % cssclass, return_list=False)
-            self.assertTemplateUsed(html, tmpl)
-            # default options:
-            #  - show_description_inline = True
-            #  - show_counter = False
-            soup = BeautifulSoup(html)
-            links = soup.findAll('a')
-            self.assert_(len(links) == 3)
-            # check order
-            order = [int(x)-1 for x in self.picset.order.split(",")]
-            for idx, link in zip(order, links):
-                self.assert_(link['href'] == self.pics[idx].url)
-            descrip = soup.findAll('p', attrs={'class':'inline_description'})
-            self.assert_(len(descrip) == 1)
-            self.assert_(html.find('inline_counter') == -1)
+            with self.assertRaises(Exception):
+                html = inlines(self.tag % cssclass, return_list=False)
 
     def test_medium_with_default_options(self):
         tmpl = 'inline_media/inline_media.pictureset.default.html'
@@ -368,43 +344,16 @@ class PictureSetTemplateTestCase(DjangoTestCase):
         positions = ['inline_mini_left', 'inline_mini_right']
         self._reverse_default_boolean_field_values()
         for cssclass in positions:
-            html = inlines(self.tag % cssclass, return_list=False)
-            self.assertTemplateUsed(html, tmpl)
-            # default options:
-            #  - show_description_inline = False
-            #  - show_counter = True
-            # But! template for size 'mini' never includes 
-            # picture's description or counter
-            soup = BeautifulSoup(html)
-            links = soup.findAll('a')
-            self.assert_(len(links) == 3)
-            # check order
-            order = [int(x)-1 for x in self.picset.order.split(",")]
-            for idx, link in zip(order, links):
-                self.assert_(link['href'] == self.pics[idx].url)
-            self.assert_(html.find('inline_description') == -1)
-            self.assert_(html.find('inline_counter') == -1)
+            with self.assertRaises(Exception):
+                html = inlines(self.tag % cssclass, return_list=False)
 
     def test_small_with_reversed_default_options(self):
         tmpl = 'inline_media/inline_media.pictureset.default.html'
         positions = ['inline_small_left', 'inline_small_right']
         self._reverse_default_boolean_field_values()
         for cssclass in positions:
-            html = inlines(self.tag % cssclass, return_list=False)
-            self.assertTemplateUsed(html, tmpl)
-            # default options:
-            #  - show_description_inline = False
-            #  - show_counter = True
-            soup = BeautifulSoup(html)
-            links = soup.findAll('a')
-            self.assert_(len(links) == 3)
-            # check order
-            order = [int(x)-1 for x in self.picset.order.split(",")]
-            for idx, link in zip(order, links):
-                self.assert_(link['href'] == self.pics[idx].url)
-            self.assert_(html.find('inline_description') == -1)
-            counter = soup.findAll('p', attrs={'class':'inline_counter'})
-            self.assert_(len(counter) == 1)
+            with self.assertRaises(Exception):
+                html = inlines(self.tag % cssclass, return_list=False)
 
     def test_medium_with_reversed_default_options(self):
         tmpl = 'inline_media/inline_media.pictureset.default.html'
diff --git inline_media/tests/test_utils.py inline_media/tests/test_utils.py
new file mode 100644
index 0000000..7803d3d
--- /dev/null
+++ inline_media/tests/test_utils.py
@@ -0,0 +1,3 @@
+#-*- coding: utf-8 -*-
+
+from django.conf import settings
diff --git inline_media/tests/test_widgets.py inline_media/tests/test_widgets.py
index ee2e57c..7f278fb 100644
--- inline_media/tests/test_widgets.py
+++ inline_media/tests/test_widgets.py
@@ -1,13 +1,12 @@
 #-*- coding: utf-8 -*-
 
-from django.conf import settings
-from django.contrib.contenttypes.models import ContentType
 from django.forms.models import modelform_factory
 from django.test import TestCase as DjangoTestCase
+from django.utils import simplejson
 from django.utils.html import conditional_escape
 
-from inline_media.models import InlineType
-from inline_media.widgets import TextareaWithInlines, InlinesDialogStr
+from inline_media.widgets import (TextareaWithInlines, InlinesDialogStr, 
+                                  BaseInlinesDialogStr, build_imSizes_array)
 from inline_media.tests.models import TestModel, AnotherTestModel
 
 
@@ -30,16 +29,6 @@ class TextareaWithInlinesWidgetAttrs(DjangoTestCase):
 
 
 class AdminTextareaWithInlinesWidgetTestCase(DjangoTestCase):
-    def setUp(self):
-        ct_picture = ContentType.objects.get(
-            app_label="inline_media", model="picture")
-        ct_pictureset = ContentType.objects.get(
-            app_label="inline_media", model="pictureset")
-        InlineType.objects.create(title="Picture", 
-                                  content_type=ct_picture)
-        InlineType.objects.create(title="PictureSet", 
-                                  content_type=ct_pictureset)
-        
     def test_render_textareawithinlines_widget(self):
         neilmsg = TestModel.objects.create(
             first_text="One small step for man", 
@@ -57,4 +46,13 @@ class AdminTextareaWithInlinesWidgetTestCase(DjangoTestCase):
             conditional_escape(widget.render("test", neilmsg.second_text)), 
             manually_rendered)
 
-        
+
+class IMSizesArrayTestsCase(DjangoTestCase):
+    def test_imSizes_array_creation(self):
+        default = ['mini', 'small', 'medium', 'large', 'full']
+        expected = simplejson.dumps({
+            'inline_media/picture': default,
+            'inline_media/pictureset': ['medium', 'large', 'full'],
+            'inline_media/tests/testmediamodel': default
+        })
+        self.assertEqual(expected, build_imSizes_array())
diff --git inline_media/utils.py inline_media/utils.py
index ef61ad4..c5ee10b 100644
--- inline_media/utils.py
+++ inline_media/utils.py
@@ -1,5 +1,7 @@
 #-*- coding: utf-8 -*-
 
+from inline_media.conf import settings
+
 def unescape_inline(value):
     def unescape(s):
         s = s.replace("&quot;", '"')
@@ -21,3 +23,21 @@ def unescape_inline(value):
 
     newval += value[init:]
     return newval
+
+
+def get_css_classes_for_app_model(inline_type):
+    if not settings.INLINE_MEDIA_CUSTOM_SIZES.get(inline_type, False):
+        return []
+    css_classes = []
+    custom_sizes = settings.INLINE_MEDIA_CUSTOM_SIZES[inline_type]
+    for k in ['mini', 'small', 'medium', 'large']:
+        v = custom_sizes.get(k, None)
+        if v:
+            css_classes.append('inline_%s_left' % k)
+            css_classes.append('inline_%s_right' % k)
+    v = custom_sizes.get('full', None)
+    if v:
+        css_classes.append('inline_full_left')
+        css_classes.append('inline_full_center')
+        css_classes.append('inline_full_right')
+    return css_classes
diff --git inline_media/widgets.py inline_media/widgets.py
index 4f08b73..47c1484 100644
--- inline_media/widgets.py
+++ inline_media/widgets.py
@@ -1,14 +1,28 @@
 #-*- coding: utf-8 -*-
 
+import copy
 from django.contrib.admin.widgets import AdminTextareaWidget
 from django.core.urlresolvers import reverse
 from django.forms.util import flatatt
+from django.utils import simplejson
 from django.utils.encoding import force_unicode
 from django.utils.html import conditional_escape
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext as _
 from inline_media.conf import settings
-from inline_media.models import InlineType
+
+
+default_sizes = ['mini', 'small', 'medium', 'large', 'full']
+
+def build_imSizes_array():
+    im_sizes = {}
+    for inline_type in settings.INLINE_MEDIA_TYPES:
+        im_type = inline_type.replace('.', '/')
+        im_sizes[im_type] = copy.copy(default_sizes)
+        custom_sizes = settings.INLINE_MEDIA_CUSTOM_SIZES.get(inline_type, {})
+        for k in [k for k, v in custom_sizes.iteritems() if not v]:
+            im_sizes[im_type].remove(k)
+    return simplejson.dumps(im_sizes)
 
 
 class BaseInlinesDialogStr(object):
@@ -21,20 +35,44 @@ class BaseInlinesDialogStr(object):
         return self._do_the_widget()
 
     def _do_element_select_type(self, attrs=None):
-        widget = u'\
+        widget = '''
+<script>
+//<![CDATA[
+var imSizes = %(imSizes)s;
+function changeInlineClass(name, type) {
+    var opts = '';
+    if(imSizes[type] == undefined) {
+        opts = '<option>----------</option>';
+    } else 
+        for(var i=0; i<imSizes[type].length; i++) {
+            var size = imSizes[type][i];
+            opts += '<option value="inline_'+size+'_left">'+gettext(size+' left')+'</option>';
+            if(imSizes[type][i]=='full') 
+                opts += '<option value="inline_full_center">'+gettext('full center')+'</option>';
+            opts += '<option value="inline_'+size+'_right">'+gettext(size+' right')+'</option>';
+        }
+    var elem = document.getElementById('id_inline_class_for_'+name);  
+    elem.innerHTML = opts;
+}
+//]]>
+</script>''' % {'imSizes': build_imSizes_array()}
+        widget += '\
 <strong>%(_inline_type_)s:</strong>&nbsp;\
-<select id="id_inline_content_type_for_%(name)s" onchange="document.getElementById(\'lookup_id_inline_for_%(name)s\').href = \'../../../\'+this.value+\'/\';" style="margin-left:2px;margin-right:20px;" '
+<select id="id_inline_content_type_for_%(name)s" onchange="changeInlineClass(\'%(name)s\', this.value);document.getElementById(\'lookup_id_inline_for_%(name)s\').href = \'../../../\'+this.value+\'/\';" style="margin-left:2px;margin-right:20px;" '
         if attrs:
             widget += " ".join([u'%s="%s"' % (key, value) for key, value in attrs.iteritems()])
         widget += u'><option>----------</option>'
-        for inline in InlineType.objects.all():
+        for inline_type in getattr(settings, 'INLINE_MEDIA_TYPES', []):
+            chunks = inline_type.split('.')
+            app_label = '.'.join(chunks[:-1])
+            model_name = chunks[-1]
             widget += u'\
   <option value="%(app_label)s/%(model)s">\
     %(app_label_cap)s: %(model_cap)s\
-  </option>' % { "app_label":     inline.content_type.app_label,
-                 "model":         inline.content_type.model, 
-                 "app_label_cap": inline.content_type.app_label.capitalize(), 
-                 "model_cap":     inline.content_type.model.capitalize() }
+  </option>' % { "app_label":     app_label,
+                 "model":         model_name, 
+                 "app_label_cap": app_label.capitalize(), 
+                 "model_cap":     model_name.capitalize() }
         widget += u'</select>'
         return widget % {"_inline_type_": _("Inline type"), 
                          "name": self.name}
@@ -52,31 +90,8 @@ class BaseInlinesDialogStr(object):
         widget = u'<strong>Class:</strong>&nbsp;<select id="id_inline_class_for_%(name)s" '
         if attrs:
             widget += " ".join(['%s="%s"' % (key, value) for key, value in attrs.iteritems()])
-        widget += u'>\
-  <option value="inline_mini_left">%(_mini_left_)s</option>\
-  <option value="inline_mini_right">%(_mini_right_)s</option>\
-  <option value="inline_small_left">%(_small_left_)s</option>\
-  <option value="inline_small_right">%(_small_right_)s</option>\
-  <option value="inline_medium_left">%(_medium_left_)s</option>\
-  <option value="inline_medium_right">%(_medium_right_)s</option>\
-  <option value="inline_large_left">%(_large_left_)s</option>\
-  <option value="inline_large_right">%(_large_right_)s</option>\
-  <option value="inline_full_left">%(_full_left_)s</option>\
-  <option value="inline_full_right">%(_full_right_)s</option>\
-  <option value="inline_full_center">%(_full_center_)s</option>\
-</select>'
-        return widget % {'name': self.name, 
-                         '_mini_left_': _("Mini left"), 
-                         '_mini_right_': _("Mini right"),
-                         '_small_left_': _("Small left"),
-                         '_small_right_': _("Small right"),
-                         '_medium_left_': _("Medium left"), 
-                         '_medium_right_': _("Medium right"),
-                         '_large_left_': _("Large left"), 
-                         '_large_right_': _("Large right"),
-                         '_full_left_': _("Full left"), 
-                         '_full_right_': _("Full right"),
-                         '_full_center_': _("Full center")}
+        widget += u'><option>----------</option></select>'
+        return widget % {'name': self.name} 
     
     def _do_element_button_add(self, attrs=None):
         widget = u'<input type="button" value="%(_add_)s" style="margin-left:10px;" '
diff --git setup.py setup.py
index c74fc77..8c73854 100644
--- setup.py
+++ setup.py
@@ -10,7 +10,7 @@ test.run_tests = run_tests
 
 setup(
     name = "django-inline-media",
-    version = "1.1a6",
+    version = "1.1b1",
     packages = find_packages(),
     license = "MIT",
     description = "Simple Django app that allows insertion of inline media objects in text fields, with support for rich text editor Wysihtml5.",
